name: Deploy CI/CD

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_approval:
        description: '本番デプロイの承認をスキップ'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

# 段階的移行用の環境変数（GitHub Settings > Variables で設定）
env:
  # false: テストをスキップしてデプロイ / true: テスト合格時のみデプロイ
  GATE_DEPLOY: ${{ vars.GATE_DEPLOY || 'false' }}
  # 依存関係チェック用
  PNPM_VERSION: '8.15.0'
  NODE_VERSION: '20'

jobs:
  # 変更検出ジョブ - どのパッケージが変更されたか判定
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      packages: ${{ steps.changes.outputs.packages }}
      infra: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
              - 'packages/ui/**'
              - 'packages/design-system/**'
              - 'packages/api-contracts/**'
            backend:
              - 'apps/backend/**'
              - 'packages/api-contracts/**'
              - 'db/**'
            packages:
              - 'packages/**'
            infra:
              - '.github/workflows/**'
              - 'turbo.json'
              - 'package.json'
              - 'pnpm-workspace.yaml'

  # コード品質チェック（lint/type-check）
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: コード生成
        run: pnpm codegen && pnpm gen:messages

      - name: 型チェック
        run: pnpm type-check
        continue-on-error: ${{ env.GATE_DEPLOY != 'true' }}

      - name: Lint
        run: pnpm lint
        continue-on-error: ${{ env.GATE_DEPLOY != 'true' }}

  # テスト実行
  test:
    runs-on: ubuntu-latest
    needs: [quality-check]
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: テスト実行
        run: |
          echo "テストはまだ実装されていません - スキップ"
          # 将来的にテストを追加したら以下を有効化
          # pnpm test:run
        continue-on-error: true

  # フロントエンドのデプロイ（Vercel）
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-check, test]
    # フロントエンドまたは共通パッケージが変更された場合のみ実行
    if: |
      (needs.detect-changes.outputs.frontend == 'true' || 
       needs.detect-changes.outputs.packages == 'true' ||
       needs.detect-changes.outputs.infra == 'true') &&
      (github.event_name == 'pull_request' ||
       (github.event_name == 'push' && github.ref == 'refs/heads/main' &&
        (vars.GATE_DEPLOY != 'true' || needs.test.result == 'success')))
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
      prod-url: ${{ steps.deploy.outputs.prod-url }}
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    # Vercel側Root Directory設定（apps/frontend）を活用
    # CLI常にルート実行でRoot Directory設定に委ねる（方針A）
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      # 依存関係はモノレポのルートで解決（lockfile一貫性のため）
      - name: Install dependencies (root)
        working-directory: .
        run: pnpm install --frozen-lockfile

      # コード生成（ルートから実行）
      - name: Generate required files
        working-directory: .
        run: pnpm codegen && pnpm gen:messages

      # パス検証（リポジトリルートから実行）
      - name: Assert PWD and files (repo root)
        working-directory: .
        run: |
          echo "PWD=$(pwd)"
          ls -la
          test -d apps/frontend || (echo "apps/frontend がありません" && exit 1)
          test -f apps/frontend/package.json || (echo "apps/frontend/package.json がありません" && exit 1)
          echo "✅ Working directory validation completed"

      # ✅ プロジェクトリンクをリポジトリ直下に固定（方針A）
      - name: Vercel link (bind project at repo root)
        working-directory: .
        run: npx vercel@latest link --yes --project "$VERCEL_PROJECT_ID" --token "$VERCEL_TOKEN"

      # ✅ 環境の取り込み（リポジトリルートから実行）
      - name: Vercel pull (preview)
        if: github.event_name == 'pull_request'
        working-directory: .
        run: npx vercel@latest pull --yes --environment=preview --token "$VERCEL_TOKEN"

      - name: Vercel pull (production)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: .
        run: npx vercel@latest pull --yes --environment=production --token "$VERCEL_TOKEN"

      # 🚀 リモートビルドでデプロイ（リポジトリルートから実行）
      - name: Deploy with Vercel CLI (remote build)
        id: deploy
        if: github.event_name == 'pull_request'
        working-directory: .
        run: |
          echo "🔄 プレビュー環境用デプロイ開始（Vercel側リモートビルド）"
          echo "Debug: PWD=$(pwd)"
          echo "Debug: .vercel exists? $(test -d .vercel && echo 'YES' || echo 'NO')"
          DEPLOY_URL=$(npx vercel@latest deploy --yes --token "$VERCEL_TOKEN")
          echo "preview-url=$DEPLOY_URL" >> "$GITHUB_OUTPUT"
          echo "✅ プレビューデプロイ完了: $DEPLOY_URL"

      - name: Skip production deploy for now
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "⚠️ 本番デプロイは一時的にスキップ中"
          echo "prod-url=https://production-url-will-be-set-later" >> "$GITHUB_OUTPUT"

      - name: PRにプレビューURLをコメント
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = '${{ steps.deploy.outputs.preview-url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **フロントエンドのプレビュー環境がデプロイされました！**\n\n👉 ${url}`
            });

  # バックエンドのデプロイ（Cloudflare Workers）
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-check, test, deploy-frontend]
    # フロントエンドが成功し、バックエンドまたは共通パッケージが変更された場合のみ実行
    if: |
      needs.deploy-frontend.result == 'success' &&
      (needs.detect-changes.outputs.backend == 'true' || 
       needs.detect-changes.outputs.packages == 'true' ||
       needs.detect-changes.outputs.infra == 'true') &&
      (github.event_name == 'pull_request' ||
       (github.event_name == 'push' && github.ref == 'refs/heads/main' &&
        (vars.GATE_DEPLOY != 'true' || needs.test.result == 'success')))
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate required files
        run: pnpm codegen && pnpm gen:messages

      - name: Build backend
        run: pnpm build:backend

      # プレビュー環境へのデプロイ（動的FRONTEND_URL設定）
      - name: Deploy to Cloudflare Workers (Preview)
        if: github.event_name == 'pull_request'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: ./apps/backend
          command: deploy --env preview
          secrets: |
            FRONTEND_URL
        env:
          FRONTEND_URL: ${{ needs.deploy-frontend.outputs.preview-url || 'http://localhost:3000' }}

      # 本番環境へのデプロイ（一時的にスキップ - GUI設定FRONTEND_URL使用予定）
      - name: Deploy to Cloudflare Workers (Production)
        if: false # 本番環境準備中のため一時的にスキップ
        # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: ./apps/backend
          command: deploy --env production
          # Note: 本番環境のFRONTEND_URLはCloudflare GUI（Dashboard）から事前設定済み

      - name: PRにAPIエンドポイントをコメント
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🔧 **バックエンドAPIがプレビュー環境にデプロイされました！**\n\n👉 https://my-project-template-api-preview.workers.dev`
            });

  # 本番デプロイの承認ステップ（現在は準備中のためスキップ）
  production-approval:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: false # 本番環境準備中のため一時的にスキップ
    # if: |
    #   github.event_name == 'push' &&
    #   github.ref == 'refs/heads/main' &&
    #   github.event.inputs.skip_approval != 'true'
    environment:
      name: production
      url: ${{ needs.deploy-frontend.outputs.prod-url }}
    steps:
      - name: 本番デプロイ承認完了
        run: |
          echo "✅ 本番環境へのデプロイが承認されました"
          echo "Frontend: ${{ needs.deploy-frontend.outputs.prod-url }}"
          echo "Backend: https://my-project-template-api-production.workers.dev"

  # デプロイ成功通知
  notify-success:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: success()
    steps:
      - name: Slack通知（オプション）
        if: vars.SLACK_WEBHOOK_URL != ''
        run: |
          echo "デプロイ成功をSlackに通知"
          # curl -X POST ${{ vars.SLACK_WEBHOOK_URL }} ...

      - name: デプロイサマリー
        run: |
          echo "## 🎉 デプロイ完了"
          echo ""
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "### プレビュー環境"
            echo "- Frontend: ${{ needs.deploy-frontend.outputs.preview-url }}"
            echo "- Backend: https://my-project-template-api-preview.workers.dev"
          else
            echo "### 本番環境"
            echo "- Frontend: ${{ needs.deploy-frontend.outputs.prod-url }}"
            echo "- Backend: https://my-project-template-api-production.workers.dev"
          fi
